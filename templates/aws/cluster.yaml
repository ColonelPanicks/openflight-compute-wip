---
Description: 'Flight Domain Template'
Parameters:
  sourceimage:
    Type: String
    Description: 'AMI ID to use for nodes'
  clustername:
    Type: String
    Description: 'Name of the cluster'
  customdatagw:
    Type: String
    Description: 'Cloud-init customdata for chead encoded in base64'
  customdatanode:
    Type: String
    Description: 'Cloud-init customdata for cnodes encoded in base64'
  computeNodesCount:
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 8
    Description: 'Number of compute nodes to include in cluster'
  cheadinstancetype:
    Type: String
    Default: 't3.small'
    Description: 'Instance type to be used for the chead node'
  computeinstancetype:
    Type: String
    Default: 't3.small'
    Description: 'Instance type to be used for the compute nodes'
Conditions:
  CreateNode03: !Or [ !Equals [ !Ref computeNodesCount, 3 ], !Equals [ !Ref computeNodesCount, 4 ], !Equals [ !Ref computeNodesCount, 5 ], !Equals [ !Ref computeNodesCount, 6 ], !Equals [ !Ref computeNodesCount, 7 ], !Equals [ !Ref computeNodesCount, 8 ]]
  CreateNode04: !Or [ !Equals [ !Ref computeNodesCount, 4 ], !Equals [ !Ref computeNodesCount, 5 ], !Equals [ !Ref computeNodesCount, 6 ], !Equals [ !Ref computeNodesCount, 7 ], !Equals [ !Ref computeNodesCount, 8 ]]
  CreateNode05: !Or [ !Equals [ !Ref computeNodesCount, 5 ], !Equals [ !Ref computeNodesCount, 6 ], !Equals [ !Ref computeNodesCount, 7 ], !Equals [ !Ref computeNodesCount, 8 ]]
  CreateNode06: !Or [ !Equals [ !Ref computeNodesCount, 6 ], !Equals [ !Ref computeNodesCount, 7 ], !Equals [ !Ref computeNodesCount, 8 ]]
  CreateNode07: !Or [ !Equals [ !Ref computeNodesCount, 7 ], !Equals [ !Ref computeNodesCount, 8 ]]
  CreateNode08: !Equals [ !Ref computeNodesCount, 8 ]
Resources:
  flightcloudclusternetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  flightcloudclusterinternetgateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: flightcloudclusternetwork
    Properties:
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  flightcloudclusterinternetgatewayattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref flightcloudclusterinternetgateway
      VpcId: !Ref flightcloudclusternetwork

  flightcloudclusterroutetable:
    Type: AWS::EC2::RouteTable
    DependsOn: flightcloudclusterinternetgatewayattachment
    Properties:
      VpcId: !Ref flightcloudclusternetwork
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  flightcloudclusterroutetable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref flightcloudclusternetwork
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  flightcloudclusternetwork1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.0.0/24
      VpcId: !Ref flightcloudclusternetwork
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  flightcloudclusternetwork2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.1.0/24
      VpcId: !Ref flightcloudclusternetwork
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  flightcloudclusternetwork1subnetroutetableassocation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref flightcloudclusternetwork1
      RouteTableId: !Ref flightcloudclusterroutetable

  flightcloudclusternetwork1subnetroutetableassocation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref flightcloudclusternetwork2
      RouteTableId: !Ref flightcloudclusterroutetable2

  flightcloudclusterrouteinternetgateway:
    Type: AWS::EC2::Route
    DependsOn: flightcloudclusterinternetgatewayattachment
    Properties:
      RouteTableId: !Ref flightcloudclusterroutetable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref flightcloudclusterinternetgateway

  flightcloudclusterrouteinternetgateway2:
    Type: AWS::EC2::Route
    DependsOn: chead1
    Properties:
      RouteTableId: !Ref flightcloudclusterroutetable2
      DestinationCidrBlock: '0.0.0.0/0'
      InstanceId: !Ref chead1

  flightcloudclustersecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: flightcloudcluster
      GroupDescription: 'Primary SG for basic'
      VpcId: !Ref flightcloudclusternetwork
      SecurityGroupIngress:
        -
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: '10.10.0.0/16'
          Description: 'Allow all traffic for cluster VPC'
        -
          IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
          Description: 'Allow inbound SSH access'
        -
          IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'Allow inbound HTTP connections'
        -
          IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'Allow inbound HTTPS connections'
        -
          IpProtocol: 'tcp'
          FromPort: 5901
          ToPort: 5911
          CidrIp: '0.0.0.0/0'
          Description: 'Allow 10 VNC sessions'
        -
          IpProtocol: 'icmp'
          FromPort: '8'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
          Description: 'Allow ping'
      SecurityGroupEgress:
        -
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: '0.0.0.0/0'
          Description: 'Allow outbound internet access'
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  flightcloudclusterprivatedns:
    Type: AWS::Route53::HostedZone
    DependsOn: flightcloudclusternetwork
    Properties:
      HostedZoneConfig:
        Comment: "Private DNS for a flightcloudcluster"
      Name: !Sub
        - "pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      VPCs:
      - VPCId: !Ref flightcloudclusternetwork
        VPCRegion: !Ref 'AWS::Region'
      HostedZoneTags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  dnschead1:
    Type: AWS::Route53::RecordSet
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for chead1
      Name: !Sub
        - "chead1.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt chead1.PrivateIp

  dnscnode01:
    Type: AWS::Route53::RecordSet
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for node01
      Name: !Sub
        - "cnode01.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt cnode01.PrivateIp

  dnscnode02:
    Type: AWS::Route53::RecordSet
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for node02
      Name: !Sub
        - "cnode02.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt cnode02.PrivateIp

  dnscnode03:
    Type: AWS::Route53::RecordSet
    Condition: CreateNode03
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for node03
      Name: !Sub
        - "cnode03.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt cnode03.PrivateIp

  dnscnode04:
    Type: AWS::Route53::RecordSet
    Condition: CreateNode04
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for node04
      Name: !Sub
        - "cnode04.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt cnode04.PrivateIp

  dnscnode05:
    Type: AWS::Route53::RecordSet
    Condition: CreateNode05
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for node05
      Name: !Sub
        - "cnode05.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt cnode05.PrivateIp

  dnscnode06:
    Type: AWS::Route53::RecordSet
    Condition: CreateNode06
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for node06
      Name: !Sub
        - "cnode06.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt cnode06.PrivateIp

  dnscnode07:
    Type: AWS::Route53::RecordSet
    Condition: CreateNode07
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for node07
      Name: !Sub
        - "cnode07.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt cnode07.PrivateIp

  dnscnode08:
    Type: AWS::Route53::RecordSet
    Condition: CreateNode08
    DependsOn: flightcloudclusterprivatedns
    Properties:
      HostedZoneName: !Sub
        - "pri.${cn}.cluster.local."
        - { cn: !Ref clustername }
      Comment: Entry for node08
      Name: !Sub
        - "cnode08.pri.${cn}.cluster.local"
        - { cn: !Ref clustername }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt cnode08.PrivateIp

  chead1network1interface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork1
      PrivateIpAddress: 10.10.0.11
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  chead1:
    Type: AWS::EC2::Instance
    DependsOn: chead1pubIPassociation
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_chead1"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref cheadinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref chead1network1interface
          DeviceIndex: 0
      UserData: !Ref customdatagw
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

  chead1pubIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "core"
          Value: "true"

  chead1pubIPassociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref chead1network1interface
      AllocationId: !GetAtt chead1pubIP.AllocationId

  cnode01network1interface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork2
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"

  cnode01:
    Type: AWS::EC2::Instance
    DependsOn: chead1
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_node01"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref computeinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref cnode01network1interface
          DeviceIndex: 0
      UserData: !Ref customdatanode
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

  cnode02network1interface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork2
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"

  cnode02:
    Type: AWS::EC2::Instance
    DependsOn: chead1
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_node02"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref computeinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref cnode02network1interface
          DeviceIndex: 0
      UserData: !Ref customdatanode
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

  cnode03network1interface:
    Type: AWS::EC2::NetworkInterface
    Condition: CreateNode03
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork2
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"

  cnode03:
    Type: AWS::EC2::Instance
    Condition: CreateNode03
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_node03"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref computeinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref cnode03network1interface
          DeviceIndex: 0
      UserData: !Ref customdatanode
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

  cnode04network1interface:
    Type: AWS::EC2::NetworkInterface
    Condition: CreateNode04
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork2
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"

  cnode04:
    Type: AWS::EC2::Instance
    Condition: CreateNode04
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_node04"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref computeinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref cnode04network1interface
          DeviceIndex: 0
      UserData: !Ref customdatanode
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

  cnode05network1interface:
    Type: AWS::EC2::NetworkInterface
    Condition: CreateNode05
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork2
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"

  cnode05:
    Type: AWS::EC2::Instance
    Condition: CreateNode05
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_node05"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref computeinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref cnode05network1interface
          DeviceIndex: 0
      UserData: !Ref customdatanode
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

  cnode06network1interface:
    Type: AWS::EC2::NetworkInterface
    Condition: CreateNode06
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork2
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"

  cnode06:
    Type: AWS::EC2::Instance
    Condition: CreateNode06
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_node06"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref computeinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref cnode06network1interface
          DeviceIndex: 0
      UserData: !Ref customdatanode
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

  cnode07network1interface:
    Type: AWS::EC2::NetworkInterface
    Condition: CreateNode07
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork2
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"

  cnode07:
    Type: AWS::EC2::Instance
    Condition: CreateNode07
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_node07"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref computeinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref cnode07network1interface
          DeviceIndex: 0
      UserData: !Ref customdatanode
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

  cnode08network1interface:
    Type: AWS::EC2::NetworkInterface
    Condition: CreateNode08
    Properties:
      SourceDestCheck: false
      GroupSet:
        - !Ref flightcloudclustersecuritygroup
      SubnetId: !Ref flightcloudclusternetwork2
      Tags:
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"

  cnode08:
    Type: AWS::EC2::Instance
    Condition: CreateNode08
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub
           - "${cn}_node08"
           - { cn: !Ref clustername }
        -
          Key: "project"
          Value: !Ref clustername
        -
          Key: "compute"
          Value: "true"
        -
          Key: "compute_group"
          Value: "default"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref sourceimage
      InstanceType: !Ref computeinstancetype
      Monitoring: true
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref cnode08network1interface
          DeviceIndex: 0
      UserData: !Ref customdatanode
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: 'gp3'
            DeleteOnTermination: 'true'

